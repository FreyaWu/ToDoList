{"ast":null,"code":"var _jsxFileName = \"/Users/wufeiyi/Documents/Programming/Web Develop/Practice/todolist/client/src/ListEdit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Form, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ListEdit(props) {\n  _s();\n\n  console.log(props);\n  const listId = props.match.params.listId;\n  const [list, setList] = useState();\n  const [tasks, setTasks] = useState([]);\n\n  const fetchList = async () => {\n    const {\n      data: list\n    } = await axios.get(`/api/todolist/${listId}`);\n    setList(list);\n    console.log(list);\n  };\n\n  const handleAddTasks = async e => {\n    e.preventDefault();\n    console.log(e);\n    const newTask = e.target.task.value;\n    setTasks(...tasks, newTask);\n    console.log(tasks);\n  };\n\n  const handleUpdate = async e => {\n    e.preventDefault();\n    console.log(e.target);\n    const updatedList = {\n      title: e.target.title.value,\n      author: e.target.author.value,\n      date: e.target.date.value,\n      tasks: [e.target.task.value],\n      count: tasks.length\n    };\n    console.log(updatedList); // await axios.patch('/api/todolist/', updatedList);\n  };\n\n  useEffect(() => {\n    fetchList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list && list.author && list.title && list.date && list.tasks && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Old version: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [list.author, \"'s \", list.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), list.date, list.tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-1\",\n          children: task\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"mt-3\": true,\n        \"justify-content-center\": true,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleUpdate,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"List title:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: list.title,\n              name: \"title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"name\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: list.author,\n              name: \"author\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"date\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: list.date,\n              name: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Task:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: list.tasks,\n              name: \"task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mt-3\",\n            variant: \"warning\",\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListEdit, \"/naHuE7CG2AEsAeOdf9cuKtYHXg=\");\n\n_c = ListEdit;\nexport default ListEdit; // return (\n//     <div className=\"pt-2 align-text-center\">\n//         {/* <form>\n//                 {tasks.map((task, index) =>\n//                     <div>\n//                         <input type=\"checkbox\" id=\"task\" name=\"task\" value=\"task\" className=\"task\" key={index}></input>\n//                         <label for=\"task\" className=\"m-1 task\" key={index}>{task.time} —— {task.task}</label>\n//                     </div>\n//                 )}\n//                 <Button variant=\"warning\" type=\"submit\" className=\"m-2\" onDelete={deleteTasks}>Completed!</Button>\n//             </form> */}\n//         {list.list.author}'s {list.list.title} - {list.list.date}\n//         {list.list.tasks.map((task, index) =>\n//             <TaskBox key={index} className=\"m-1\" onClick={() => handleDelete(task._id)}\n//                 onMouseEnter={() => setIsShown(true)}\n//                 onMouseLeave={() => setIsShown(false)}>\n//                 {isShown && (\n//                     <TaskOverlay />\n//                 )}\n//                 {task}\n//             </TaskBox>\n//         )}\n//         <Button className=\"mb-3\" variant=\"danger\">Delete</Button>\n//     </div>\n// )\n\nvar _c;\n\n$RefreshReg$(_c, \"ListEdit\");","map":{"version":3,"sources":["/Users/wufeiyi/Documents/Programming/Web Develop/Practice/todolist/client/src/ListEdit.js"],"names":["React","useEffect","useState","axios","Form","Button","ListEdit","props","console","log","listId","match","params","list","setList","tasks","setTasks","fetchList","data","get","handleAddTasks","e","preventDefault","newTask","target","task","value","handleUpdate","updatedList","title","author","date","count","length","map","index"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Form, Button } from 'react-bootstrap';\n\nfunction ListEdit(props) {\n    console.log(props)\n    const listId = props.match.params.listId;\n    const [list, setList] = useState();\n    const [tasks, setTasks] = useState([]);\n\n    const fetchList = async () => {\n        const { data: list } = await axios.get(`/api/todolist/${listId}`);\n        setList(list);\n        console.log(list);\n    }\n\n    const handleAddTasks = async (e) => {\n        e.preventDefault();\n        console.log(e);\n        const newTask = e.target.task.value;\n        setTasks(...tasks, newTask);\n        console.log(tasks);\n    }\n\n    const handleUpdate = async (e) => {\n        e.preventDefault();\n        console.log(e.target);\n        const updatedList = { title: e.target.title.value, author: e.target.author.value, date: e.target.date.value, tasks: [e.target.task.value], count: tasks.length };\n        console.log(updatedList);\n        // await axios.patch('/api/todolist/', updatedList);\n    }\n\n    useEffect(() => {\n        fetchList();\n    }, [])\n\n    return (\n        <div>\n            {\n                list && list.author && list.title && list.date && list.tasks &&\n                <>\n                    <div>\n                        <h2>Old version: </h2>\n\n                        <div>\n                            {list.author}'s {list.title}\n                        </div>\n\n                        {list.date}\n                        {list.tasks.map((task, index) =>\n                            <div key={index} className=\"m-1\">\n                                {task}\n                            </div>\n                        )}\n\n\n                    </div>\n\n                    <div mt-3 justify-content-center>\n                        <h2>Update</h2>\n                        <Form onSubmit={handleUpdate}>\n                            <Form.Group controlId=\"title\">\n                                <Form.Label>List title:</Form.Label>\n                                <Form.Control type=\"text\" placeholder={list.title} name=\"title\" />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"name\">\n                                <Form.Label>Name:</Form.Label>\n                                <Form.Control type=\"text\" placeholder={list.author} name=\"author\" />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"date\">\n                                <Form.Label>Date:</Form.Label>\n                                <Form.Control type=\"text\" placeholder={list.date} name=\"date\" />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Label>Task:</Form.Label>\n                                <Form.Control type=\"text\" placeholder={list.tasks} name=\"task\" />\n                                {/* <Button className=\"mt-3\" variant=\"secondary\" type=\"submit\">+</Button> */}\n                            </Form.Group>\n\n                            <Button className=\"mt-3\" variant=\"warning\" type=\"submit\">\n                                Update\n                            </Button>\n                        </Form>\n\n                    </div>\n                </>\n            }\n\n\n\n        </div>\n    )\n\n}\n\nexport default ListEdit;\n\n\n// return (\n//     <div className=\"pt-2 align-text-center\">\n//         {/* <form>\n//                 {tasks.map((task, index) =>\n//                     <div>\n//                         <input type=\"checkbox\" id=\"task\" name=\"task\" value=\"task\" className=\"task\" key={index}></input>\n//                         <label for=\"task\" className=\"m-1 task\" key={index}>{task.time} —— {task.task}</label>\n//                     </div>\n//                 )}\n//                 <Button variant=\"warning\" type=\"submit\" className=\"m-2\" onDelete={deleteTasks}>Completed!</Button>\n//             </form> */}\n//         {list.list.author}'s {list.list.title} - {list.list.date}\n//         {list.list.tasks.map((task, index) =>\n//             <TaskBox key={index} className=\"m-1\" onClick={() => handleDelete(task._id)}\n//                 onMouseEnter={() => setIsShown(true)}\n//                 onMouseLeave={() => setIsShown(false)}>\n//                 {isShown && (\n//                     <TaskOverlay />\n//                 )}\n//                 {task}\n//             </TaskBox>\n//         )}\n//         <Button className=\"mb-3\" variant=\"danger\">Delete</Button>\n//     </div>\n\n// )"]},"metadata":{},"sourceType":"module"}